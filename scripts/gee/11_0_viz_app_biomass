// ===================================
// 1. SET UP MAP DATA=================
// ===================================

// 1.0 ----- PARAMETERS -----

var version = 'v20240514';
var palettes = require('users/loganberner/nasa_arctic_biomass:00_fun_palettes');
var biomass_max = 2000;
var mask_trees = false; // Choose 'true' or 'false'
var uncertainty_max = 4;

// 1.1 ----- READ IN DATA -----

var plant_probability_percentiles = ee.Image("projects/arctic-biomass-mapping/assets/modeled_final/total_probability_2020_j_index_v20240514").divide(100);
var woody_probability_percentiles = ee.Image("projects/arctic-biomass-mapping/assets/modeled_final/woody_probability_2020_j_index_v20240514").divide(100);
var plant_biomass_percentiles = ee.Image("projects/arctic-biomass-mapping/assets/modeled_final/total_biomass_2020_j_index_v20240514");
var woody_biomass_percentiles = ee.Image("projects/arctic-biomass-mapping/assets/modeled_final/woody_biomass_2020_j_index_v20240514");
var water_snow_ice = ee.Image("projects/arctic-biomass-mapping/assets/modeled_final/water_snow_ice").rename('mask_val');
var canopy_height = ee.ImageCollection("projects/meta-forest-monitoring-okw37/assets/CanopyHeight").mosaic();

// 1.2 ----- SET UP TREE MASK -----

// Fill currently masked areas with low value to ensure we include Greeland, barrier islands etc.
canopy_height = canopy_height.unmask(0).setDefaultProjection('EPSG:4326'); 

// Create mask
var canopy_height_mask = canopy_height.lt(5).selfMask();

// ===========================================
// 2. CALCULATE UNCERTAINTY METRICS ==========
// ===========================================

// 2.0 ----- PROBABILITY OF PRESENCE -----

// Median
var plant_probability = plant_probability_percentiles.select('total_probability').rename('plant_probability');
var woody_probability = woody_probability_percentiles.select('woody_probability').rename('woody_plant_probability');

// Upper and lower confidence intervals
var plant_probability_lwr = plant_probability_percentiles.select('total_probability_lwr');
var plant_probability_upr = plant_probability_percentiles.select('total_probability_upr');
var woody_probability_lwr = woody_probability_percentiles.select('woody_probability_lwr');
var woody_probability_upr = woody_probability_percentiles.select('woody_probability_upr');

// Confidence interval
var plant_probability_ci = plant_probability_upr.subtract(plant_probability_lwr);
var woody_probability_ci = woody_probability_upr.subtract(woody_probability_lwr);

// Relative uncertainty (CI/median)
var plant_probability_rUnc = plant_probability_ci.divide(plant_probability).rename('plant_probability_relative_uncertainty');
var woody_probability_rUnc = woody_probability_ci.divide(woody_probability).rename('woody_plant_probability_relative_uncertainty');

// 2.1 ----- CONTINUOUS BIOMASS -----

// Median
var plant_biomass = plant_biomass_percentiles.select('total_biomass').rename('plant_biomass_gm2');
var woody_biomass = woody_biomass_percentiles.select('woody_biomass').rename('woody_plant_biomass_gm2');

// Upper and lower confidence intervals
var plant_biomass_lwr = plant_biomass_percentiles.select('total_biomass_lwr');
var plant_biomass_upr = plant_biomass_percentiles.select('total_biomass_upr');
var woody_biomass_lwr = woody_biomass_percentiles.select('woody_biomass_lwr');
var woody_biomass_upr = woody_biomass_percentiles.select('woody_biomass_upr');

// Confidence interval
var plant_biomass_ci = plant_biomass_upr.subtract(plant_biomass_lwr);
var woody_biomass_ci = woody_biomass_upr.subtract(woody_biomass_lwr);

// Relative uncertainty (CI/median)
var plant_biomass_rUnc = plant_biomass_ci.divide(plant_biomass).rename('plant_biomass_relative_uncertainty');
var woody_biomass_rUnc = woody_biomass_ci.divide(woody_biomass).rename('woody_plant_biomass_relative_uncertainty');

// 2.2 ----- CALCULATE WOODY DOMINANCE -----

var woody_dominance = woody_biomass.divide(plant_biomass).multiply(100).rename('woody_dominance');

// ================================
// 3. ADD ZEROS TO MAPS ===========
// ================================

water_snow_ice = water_snow_ice.multiply(0).clip(ee.Geometry.Polygon([-180, 81.86, 0, 81.86, 180, 81.86, 180, 45, 0, 45, -180, 45], null, false));

plant_biomass = ee.ImageCollection([plant_biomass, water_snow_ice.rename('plant_biomass_gm2')]).mosaic();
woody_biomass = ee.ImageCollection([woody_biomass, water_snow_ice.rename('woody_plant_biomass_gm2')]).mosaic();
plant_probability = ee.ImageCollection([plant_probability, water_snow_ice.rename('plant_probability')]).mosaic();
woody_probability = ee.ImageCollection([woody_probability, water_snow_ice.rename('woody_plant_probability')]).mosaic();
woody_dominance = ee.ImageCollection([woody_dominance, water_snow_ice.rename('woody_dominance')]).mosaic();
plant_biomass_rUnc = ee.ImageCollection([plant_biomass_rUnc, water_snow_ice.rename('plant_biomass_relative_uncertainty')]).mosaic();
woody_biomass_rUnc = ee.ImageCollection([woody_biomass_rUnc, water_snow_ice.rename('woody_plant_biomass_relative_uncertainty')]).mosaic();
plant_probability_rUnc = ee.ImageCollection([plant_probability_rUnc, water_snow_ice.rename('plant_probability_relative_uncertainty')]).mosaic();
woody_probability_rUnc = ee.ImageCollection([woody_probability_rUnc, water_snow_ice.rename('woody_plant_probability_relative_uncertainty')]).mosaic();

// ================================
// 4. CREATE MASKED MAPS ==========
// ================================

var plant_probability_masked = plant_probability.updateMask(canopy_height_mask);
var woody_probability_masked = woody_probability.updateMask(canopy_height_mask);
var plant_probability_rUnc_masked = plant_probability_rUnc.updateMask(canopy_height_mask);
var woody_probability_rUnc_masked = woody_probability_rUnc.updateMask(canopy_height_mask);
var plant_biomass_masked = plant_biomass.updateMask(canopy_height_mask);
var woody_biomass_masked = woody_biomass.updateMask(canopy_height_mask);
var plant_biomass_rUnc_masked = plant_biomass_rUnc.updateMask(canopy_height_mask);
var woody_biomass_rUnc_masked = woody_biomass_rUnc.updateMask(canopy_height_mask);
var woody_dominance_masked = woody_dominance.updateMask(canopy_height_mask);

// =========================
// 5. SET UP ROOT ==========
// =========================

// Clear existing map
ui.root.clear();

// Initiate new map object
var map = ui.Map();

// Add custom map
ui.root.add(map);

// Set visibility options to remove geometry creator and map type controller
map.setControlVisibility({
    all: true,
    layerList: true,
    zoomControl: true,
    scaleControl: true,
    mapTypeControl: true,
    fullscreenControl: true,
    drawingToolsControl: false
});

// Set map center
map.setCenter(-72.51306978186783, 69.57377777569933, 3);

// ==============================
// 6. CREATE INSPECTOR ==========
// ==============================

// https://gis.stackexchange.com/questions/446492/making-a-google-earth-engine-app-clickable

// 6.0 ----- GATHER DATA -----

var all_data = woody_biomass_rUnc.addBands(plant_biomass_rUnc).addBands(woody_probability_rUnc).addBands(plant_probability_rUnc).addBands(woody_dominance).addBands(woody_biomass).addBands(plant_biomass).addBands(woody_probability).addBands(plant_probability);

// 6.1 ----- CREATE PANEL -----

var inspector = ui.Panel({
  widgets: [ui.Label('Click to get data')],
  style: {position: 'top-left'}
});

// 6.2 ----- CREATE INSPECTOR FUNCTION -----

var inspector_fxn = function(coords) {

  // Show the loading label
  inspector.widgets().set(0, ui.Label({
    value: 'Loading...',
    style: {color: 'gray'}
  }));
  
  // Get user clicked point
  var point = ee.Geometry.Point([coords.lon, coords.lat]);
  
  // Get map data at clicked point
  all_data
    .reduceRegion({
      reducer: ee.Reducer.mean(), 
      geometry: point, 
      scale: 30 // Reduce at the scale of the map
    })
    .evaluate(function (data) { // Get the value in the background
      inspector.widgets().set(0, ui.Label({
        value: 'Plant probability of presence: ' + data.plant_probability.toFixed(2) + '\n' +
               'Woody plant probability of presence: ' + data.woody_plant_probability.toFixed(2) + '\n' +
               'Plant biomass (gm⁻²): ' + data.plant_biomass_gm2 + '\n' +
               'Woody plant biomass (gm⁻²): ' + data.woody_plant_biomass_gm2 + '\n' +
               'Woody dominance (%): ' + data.woody_dominance.toFixed(0) + '\n' +
               'Plant biomass relative uncertainty: ' + data.plant_biomass_relative_uncertainty.toFixed(2) + '\n' +
               'Woody plant biomass relative uncertainty: ' + data.woody_plant_biomass_relative_uncertainty.toFixed(2) + '\n' +
               'Plant probability of presence relative uncertainty: ' + data.plant_probability_relative_uncertainty.toFixed(2) + '\n' +
               'Woody plant probability of presence relative uncertainty: ' + data.woody_plant_probability_relative_uncertainty.toFixed(2) + '\n',
        style: {whiteSpace: 'pre'}
      }));
    });
};

// 6.3 ----- ADD TO MAP AND ASSIGN FUNCTION -----

map.add(inspector);
map.onClick(inspector_fxn);

// ==========================================
// 7. CREATE MASK TREES CHECKBOX ============
// ==========================================

// 7.0 ----- CREATE CHECKBOX -----

var checkbox_mask_trees = ui.Checkbox({
  label: 'mask out vegetation with canopy height > 5m',
  value: false,
  style: {
    fontSize: '12pt',
    position : 'top-center'
  }
});

// 7.1 ----- CREATE CHECKBOX FUNCTION -----

var mask_trees = function(checked){
  
  // Get list of whether layers are currently on/off
  var lyrs = map.layers().getJsArray();
  var lyrs_on = lyrs.map(function(f){return f.get('shown')});
    
  if(checkbox_mask_trees.getValue()){ // If checked
    
    // Clear map
    map.clear();
    
    // Map masked layers
    map.addLayer(woody_probability_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Probability of Presence - Relative Uncertainty', lyrs_on[0]);
    map.addLayer(plant_probability_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Probability of Presence - Relative Uncertainty', lyrs_on[1]);
    map.addLayer(woody_biomass_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Biomass - Relative Uncertainty', lyrs_on[2]);
    map.addLayer(plant_biomass_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Biomass - Relative Uncertainty', lyrs_on[3]);
    map.addLayer(woody_probability_masked, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Woody Plant Probability of Presence', lyrs_on[4]);
    map.addLayer(plant_probability_masked, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Plant Probability of Presence', lyrs_on[5]);
    map.addLayer(woody_dominance_masked, {min: 0, max: dominance_slider.getValue(), palette: palettes.woody_dominance_palette_grey}, 'Woody Dominance (%)', lyrs_on[6]);
    map.addLayer(woody_biomass_masked, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Woody Plant Biomass (g/m2)', lyrs_on[7]);
    map.addLayer(plant_biomass_masked, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Plant Biomass (g/m2)', lyrs_on[8]);
    
    // Add inspector
    map.add(inspector);
    map.onClick(inspector_fxn);

    // Change to crosshair
    map.style().set('cursor', 'crosshair');
    
  }else { // If not checked
    
    // Clear map
    map.clear();

    // Map unmasked layers
    map.addLayer(woody_probability_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Probability of Presence - Relative Uncertainty', lyrs_on[0]);
    map.addLayer(plant_probability_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Probability of Presence - Relative Uncertainty', lyrs_on[1]);
    map.addLayer(woody_biomass_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Biomass - Relative Uncertainty', lyrs_on[2]);
    map.addLayer(plant_biomass_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Biomass - Relative Uncertainty', lyrs_on[3]);
    map.addLayer(woody_probability, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Woody Plant Probability of Presence', lyrs_on[4]);
    map.addLayer(plant_probability, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Plant Probability of Presence', lyrs_on[5]);
    map.addLayer(woody_dominance, {min: 0, max: dominance_slider.getValue(), palette: palettes.woody_dominance_palette_grey}, 'Woody Dominance (%)', lyrs_on[6]);
    map.addLayer(woody_biomass, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Woody Plant Biomass (g/m2)', lyrs_on[7]);
    map.addLayer(plant_biomass, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Plant Biomass (g/m2)', lyrs_on[8]);

    // Add inspector
    map.add(inspector);
    map.onClick(inspector_fxn);

    // Change to crosshair
    map.style().set('cursor', 'crosshair');

  }

};

// 7.2----- ASSIGN FUNCTION -----

checkbox_mask_trees.onChange(mask_trees);

// ==========================================
// 8. CREATE SLIDERS ========================
// ==========================================

// 8.0 ----- CREATE SLIDERS -----

var probability_slider = ui.Slider({
  min: 0,
  max: 1,
  value: 1,
  step: 0.1,
  style: {width: '84%', // Without panel and zero label, use '88%'
          fontSize: '12pt',
          margin: '2% 0% 2% 1.5%',  // Without panel and zero label, use '2% 0% 2% 12.5%'
          padding: '0% 0% 2% 0%'}
});

var biomass_slider = ui.Slider({
  min: 0,
  max: 4000,
  value: 2000,
  step: 100,
  style: {width: '84%', // Without panel and zero label, use '88%'
          fontSize: '12pt',
          margin: '2% 0% 2% 1.5%',  // Without panel and zero label, use '2% 0% 2% 12.5%'
          padding: '0% 0% 2% 0%'}
});

var dominance_slider = ui.Slider({
  min: 0,
  max: 100,
  value: 100,
  step: 1,
  style: {width: '84%', // Without panel and zero label, use '88%'
          fontSize: '12pt',
          margin: '2% 0% 2% 1.5%',  // Without panel and zero label, use '2% 0% 2% 12.5%'
          padding: '0% 0% 2% 0%'}
});

var uncertainty_slider = ui.Slider({
  min: 0,
  max: 6,
  value: 4,
  step: 0.5,
  style: {width: '84%', // Without panel and zero label, use '88%'
          fontSize: '12pt',
          margin: '2% 0% 2% 1.5%',  // Without panel and zero label, use '2% 0% 2% 12.5%'
          padding: '0% 0% 2% 0%'}
});

// 8.1 ----- CREATE SLIDER ZERO LABELS -----

var probability_slider_zero = ui.Label({
  value: '0',
  style: {fontSize: '12pt',
      fontWeight: 'normal',
      margin: '0% 0% 0% 10%',
      padding: '2% 0% 0% 0%'}
});

var biomass_slider_zero = ui.Label({
  value: '0',
  style: {fontSize: '12pt',
      fontWeight: 'normal',
      margin: '0% 0% 0% 10%',
      padding: '2% 0% 0% 0%'}
});

var dominance_slider_zero = ui.Label({
  value: '0',
  style: {fontSize: '12pt',
      fontWeight: 'normal',
      margin: '0% 0% 0% 10%',
      padding: '2% 0% 0% 0%'}
});

var uncertainty_slider_zero = ui.Label({
  value: '0',
  style: {fontSize: '12pt',
      fontWeight: 'normal',
      margin: '0% 0% 0% 10%',
      padding: '2% 0% 0% 0%'}
});

// 8.2 ----- ASSEMBLE SLIDER PANELS -----

var probability_slider_panel = ui.Panel([probability_slider_zero, probability_slider],
                                        ui.Panel.Layout.flow('horizontal'));

var biomass_slider_panel = ui.Panel([biomass_slider_zero, biomass_slider],
                                        ui.Panel.Layout.flow('horizontal'));
                                        
var dominance_slider_panel = ui.Panel([dominance_slider_zero, dominance_slider],
                                        ui.Panel.Layout.flow('horizontal'));
                                        
var uncertainty_slider_panel = ui.Panel([uncertainty_slider_zero, uncertainty_slider],
                                        ui.Panel.Layout.flow('horizontal'));
                                        
// 8.3 ----- CREATE SLIDER FUNCTIONS -----

var apply_probability_slider = function(){
  
  // Get list of whether layers are currently on/off
  var lyrs = map.layers().getJsArray();
  var lyrs_on = lyrs.map(function(f){return f.get('shown')});

  // Check for tree mask and update max value
  if(checkbox_mask_trees.getValue()){
    map.layers().set(4, ui.Map.Layer(woody_probability_masked, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Woody Plant Probability of Presence', lyrs_on[4]));
    map.layers().set(5, ui.Map.Layer(plant_probability_masked, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Plant Probability of Presence', lyrs_on[5]));
  }else{
    map.layers().set(4, ui.Map.Layer(woody_probability, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Woody Plant Probability of Presence', lyrs_on[4]));
    map.layers().set(5, ui.Map.Layer(plant_probability, {min: 0, max: probability_slider.getValue(), palette: palettes.presence_palette}, 'Plant Probability of Presence', lyrs_on[5]));
  }
  
};

var apply_biomass_slider = function(){
  
  // Get list of whether layers are currently on/off
  var lyrs = map.layers().getJsArray();
  var lyrs_on = lyrs.map(function(f){return f.get('shown')});
  
  // Check for tree mask and update max value
  if(checkbox_mask_trees.getValue()){
    map.layers().set(7, ui.Map.Layer(woody_biomass_masked, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Woody Plant Biomass (g/m2)', lyrs_on[7]));
    map.layers().set(8, ui.Map.Layer(plant_biomass_masked, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Plant Biomass (g/m2)', lyrs_on[8]));
  }else{
    map.layers().set(7, ui.Map.Layer(woody_biomass, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Woody Plant Biomass (g/m2)', lyrs_on[7]));
    map.layers().set(8, ui.Map.Layer(plant_biomass, {min: 0, max: biomass_slider.getValue(), palette: palettes.biomass_palette_grey}, 'Plant Biomass (g/m2)', lyrs_on[8]));
  }
  
};

var apply_dominance_slider = function(){
  
  // Get list of whether layers are currently on/off
  var lyrs = map.layers().getJsArray();
  var lyrs_on = lyrs.map(function(f){return f.get('shown')});

  // Check for tree mask and update max value
  if(checkbox_mask_trees.getValue()){
    map.layers().set(6, ui.Map.Layer(woody_dominance_masked, {min: 0, max: dominance_slider.getValue(), palette: palettes.woody_dominance_palette_grey}, 'Woody Dominance (%)', lyrs_on[6]));
  }else{
    map.layers().set(6, ui.Map.Layer(woody_dominance, {min: 0, max: dominance_slider.getValue(), palette: palettes.woody_dominance_palette_grey}, 'Woody Dominance (%)', lyrs_on[6]));
  }
  
};

var apply_uncertainty_slider = function(){
  
  // Get list of whether layers are currently on/off
  var lyrs = map.layers().getJsArray();
  var lyrs_on = lyrs.map(function(f){return f.get('shown')});
  
  // Check for tree mask and update max value
  if(checkbox_mask_trees.getValue()){
    map.layers().set(0, ui.Map.Layer(woody_probability_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Probability of Presence - Relative Uncertainty', lyrs_on[0]));
    map.layers().set(1, ui.Map.Layer(plant_probability_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Probability of Presence - Relative Uncertainty', lyrs_on[1]));
    map.layers().set(2, ui.Map.Layer(woody_biomass_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Biomass - Relative Uncertainty', lyrs_on[2]));
    map.layers().set(3, ui.Map.Layer(plant_biomass_rUnc_masked, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Biomass - Relative Uncertainty', lyrs_on[3]));
  }else{
    map.layers().set(0, ui.Map.Layer(woody_probability_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Probability of Presence - Relative Uncertainty', lyrs_on[0]));
    map.layers().set(1, ui.Map.Layer(plant_probability_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Probability of Presence - Relative Uncertainty', lyrs_on[1]));
    map.layers().set(2, ui.Map.Layer(woody_biomass_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Woody Plant Biomass - Relative Uncertainty', lyrs_on[2]));
    map.layers().set(3, ui.Map.Layer(plant_biomass_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_slider.getValue()}, 'Plant Biomass - Relative Uncertainty', lyrs_on[3]));
  }
  
};

// 8.4 ----- ASSIGN SLIDER FUNCTIONS -----

probability_slider.onChange(apply_probability_slider);
biomass_slider.onChange(apply_biomass_slider);
dominance_slider.onChange(apply_dominance_slider);
uncertainty_slider.onChange(apply_uncertainty_slider);

// =============================
// 9. CREATE LEGENDS ===========
// =============================

// 9.0 ----- FUNCTION TO CREATE LEGENDS -----

var createColorBar = function(titleText, palette, position) {
  
  // Legend Title
  var title = ui.Label({
    value: titleText, 
    style: {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal', fontSize: '14pt'}});

  // Colorbar
  var legend = ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      format: 'png', 
      min: 0, max: 1,
      palette: palette},
    style: {margin: 'auto',
            width: '75%'}, 
  });

  // Create a panel with all 3 widgets
  var legendPanel = ui.Panel({
    widgets: [title, legend],
    style: {margin: 'auto', // padding: t/b l/r // 0px 0px
            width: '100%'} 
  });
  return legendPanel;
  
};

// 9.1 ----- CREATE LEGENDS -----

var presence_legend = createColorBar('Probability of Presence', palettes.presence_palette, 'bottom-center');
var biomass_legend = createColorBar('Biomass (gm⁻²)', palettes.biomass_palette_grey, 'bottom-center');
var woody_dominance_legend = createColorBar('Woody Dominance (%)', palettes.woody_dominance_palette_grey, 'bottom-center');
var uncertainty_legend = createColorBar('Relative Uncertainty', palettes.uncertainty_palette, 'bottom-center');

// =============================
// 10. CREATE LABELS ===========
// =============================

var title = ui.Label({
    value: 'Pan-Arctic Vegetation '+
    'Biomass Map Explorer',
    style: {
        fontSize: '28pt', // '1.4vw'
        fontWeight: 'bold'
}});

var app_descr = ui.Label({
  value: 'This app visualizes vegetation biomass and associated uncertainty across the Pan-Arctic. Maps can be toggled using the "Layers" dropdown menu on the top right. Click anywhere to get layer values at that point.',
  style: {
      fontSize: '14pt', // '.9vw'
      fontWeight: 'normal'
}});

var veg_descr = ui.Label({
  value: "'Plant biomass' refers to mean the sum of all live, oven-dried aboveground biomass of bryophytes, forbs, graminoids, shrubs, and trees per square meter of ground surface. 'Woody plant biomass' is defined as the sum of all live, aboveground shrub and tree biomass",
  style: {
      fontSize: '14pt', // '.9vw'
      fontWeight: 'normal'
}});

var manuscript = ui.Label({
  value: 'See here for more details on how biomass map layers were created: ',
  style: {
      fontSize: '14pt', // '.9vw'
      fontWeight: 'normal'
}});

var manuscript_link = ui.Label({
  value: '\tmanuscript pre-print\n\n',
  style: {
      fontSize: '14pt', // '.9vw'
      fontWeight: 'normal',
      whiteSpace: 'pre'
}}).setUrl('https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5011706');

var legends_title = ui.Label({
  value: 'Map legends:',
  style: {
      fontSize: '16pt', // '.9vw'
      fontWeight: 'bold'
}});

var legends_descr = ui.Label({
  value: 'Use the sliders to adjust the maximum value of the colormap',
  style: {
      fontSize: '14pt', // '.8vw'
      fontWeight: 'normal'
}});

var tree_mask_title = ui.Label({
  value: 'Mask trees:',
  style: {
      fontSize: '16pt', // '.9vw'
      fontWeight: 'bold'
}});

var tree_mask_desc = ui.Label({
  value: 'Biomass mapping efforts focused on non-forested Arctic tundra. However, due to the coarse deliniation of the Arctic domain some areas with trees are included in the mapped area. Areas with dense forest will be poorly predicted by these maps due to a lack of relevant training data. Masking out trees may be prudent depending on your intended use. Check below to mask trees.',
  style: {
      fontSize: '14pt', // '.8vw'
      fontWeight: 'normal'
}});

var created = ui.Label({
  value: 'Created by:',
  style: {
      fontSize: '16pt', // '.9vw'
      fontWeight: 'bold'
}});

var author = ui.Label({
  value: 'Kathleen M. Orndahl',
  style: {
      fontSize: '14pt', // '.8vw'
      fontWeight: 'normal'
}});

var affiliation = ui.Label({
  value: 'Northern Arizona University',
  style: {
      fontSize: '12pt', // '.7vw'
      fontWeight: 'normal'
}});

// =================================
// 11. CREATE MAIN PANEL ===========
// =================================

// 11.0 ----- CREATE MAIN PANEL -----

var main_panel = ui.Panel({style: {width: '600px',
                                   maxWidth: '50%'}});

// 11.1 ----- ADD WIDGETS -----

main_panel.add(title)
          .add(app_descr)
          .add(veg_descr)
          .add(manuscript)
          .add(manuscript_link)
          .add(legends_title)
          .add(legends_descr)
          .add(presence_legend)
          .add(probability_slider_panel)
          .add(biomass_legend)
          .add(biomass_slider_panel)
          .add(woody_dominance_legend)
          .add(dominance_slider_panel)
          .add(uncertainty_legend)
          .add(uncertainty_slider_panel)
          .add(tree_mask_title)
          .add(tree_mask_desc)
          .add(checkbox_mask_trees)
          .add(created)
          .add(author)
          .add(affiliation);

// 11.2 ----- ADD TO ROOT -----

ui.root.add(main_panel);

// ======================
// 12. MAP ALL ==========
// ======================

map.addLayer(woody_probability_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_max}, 'Woody Plant Probability of Presence - Relative Uncertainty');
map.addLayer(plant_probability_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_max}, 'Plant Probability of Presence - Relative Uncertainty');
map.addLayer(woody_biomass_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_max}, 'Woody Plant Biomass - Relative Uncertainty');
map.addLayer(plant_biomass_rUnc, {palette: palettes.uncertainty_palette, min: 0, max: uncertainty_max}, 'Plant Biomass - Relative Uncertainty');
map.addLayer(woody_probability, {min: 0, max: 1, palette: palettes.presence_palette}, 'Woody Plant Probability of Presence');
map.addLayer(plant_probability, {min: 0, max: 1, palette: palettes.presence_palette}, 'Plant Probability of Presence');
map.addLayer(woody_dominance, {min: 0, max: 100, palette: palettes.woody_dominance_palette_grey}, 'Woody Dominance (%)');
map.addLayer(woody_biomass, {min: 0, max: biomass_max, palette: palettes.biomass_palette_grey}, 'Woody Plant Biomass (g/m2)');
map.addLayer(plant_biomass, {min: 0, max: biomass_max, palette: palettes.biomass_palette_grey}, 'Plant Biomass (g/m2)');

map.style().set('cursor', 'crosshair'); // Change cursor to crosshair
