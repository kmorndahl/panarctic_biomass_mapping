/*

DESCRIPTION: Read in Monte Carlo data from Google Cloud Storage

AUTHOR: Kathleen Orndahl
DATE: 11-10-2024

NOTES:

// MEMORY ISSUES...
// https://groups.google.com/g/google-earth-engine-developers/c/vSZJYyZRC2c/m/ZKA6QgQ4CwAJ

// BEST METHOD IS TO USE A MANIFEST FILE VIA THE COMMAND LINE/PYTHON API:
// https://groups.google.com/g/google-earth-engine-developers/c/RdW5EXXiR9E/m/fbJ0HHV_BQAJ
// https://developers.google.com/earth-engine/guides/image_manifest

// UNELEGANT METHOD FOR CODE EDITOR:
// https://gis.stackexchange.com/questions/416431/importing-imagery-from-google-cloud-buckets-to-earth-engine
// File suffixes are *probably* the same across monte carlo iterations within the same year/response type/dataset type
// Might need to update them across years/response types/dataset types

// OTHER RESOURCES:
// https://groups.google.com/g/google-earth-engine-developers/c/PEWV71Xrs5s/m/mKRGfipiAgAJ
// https://developers.google.com/earth-engine/Earth_Engine_asset_from_cloud_geotiff

TO-DO:

*/

// ===================
// 1. SET-UP =========
// ===================

// 1.0 ----- PARAMETERS -----

var version = 'v20240514';
var year = 2020;
var response_type = 'binary';
var ds_type = 'woody';
var gcs_bucket = 'mc_iter';
var gcs_path = 'gs://' + gcs_bucket + '/' + year + '/' + response_type + '/' + ds_type + '/';
var band_name = ee.Algorithms.If(ee.String(response_type).equals('binary'), 'prob_presence', 'predicted').getInfo();
var scale = 30;
var crs = 'EPSG:3571';
var ic_path = 'projects/arctic-biomass-mapping/assets/modeled_' + response_type + '/model_' + response_type + '_' + year + '_' + ds_type + '_' + version + '_mc/';

// 1.1 ----- SET UP MC LIST -----

var mc_iters = ee.List.sequence(1, 1, 1).getInfo();

// =====================
// 2. ANALYSIS =========
// =====================

// 2.0 ----- LOOP MC LIST TO READ IN IMAGES -----

var mc_imgs = mc_iters.map(function(mc){

  var uris = ee.List(ee.Algorithms.If(ee.String(response_type).equals('binary'),
                                      ee.List([
                                        gcs_path + 'mc' + mc + '_0000000000-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000000000-0000131072.tif',
                                        gcs_path + 'mc' + mc + '_0000000000-0000262144.tif',
                                        gcs_path + 'mc' + mc + '_0000131072-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000131072-0000131072.tif',
                                        gcs_path + 'mc' + mc + '_0000131072-0000262144.tif',
                                        gcs_path + 'mc' + mc + '_0000262144-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000262144-0000131072.tif',
                                        gcs_path + 'mc' + mc + '_0000262144-0000262144.tif',
                                      ]),
                                      ee.List([
                                        gcs_path + 'mc' + mc + '_0000000000-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000000000-0000089600.tif',
                                        gcs_path + 'mc' + mc + '_0000000000-0000179200.tif',
                                        gcs_path + 'mc' + mc + '_0000000000-0000268800.tif',
                                        gcs_path + 'mc' + mc + '_0000089600-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000089600-0000089600.tif',
                                        gcs_path + 'mc' + mc + '_0000089600-0000179200.tif',
                                        gcs_path + 'mc' + mc + '_0000089600-0000268800.tif',
                                        gcs_path + 'mc' + mc + '_0000179200-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000179200-0000089600.tif',
                                        gcs_path + 'mc' + mc + '_0000179200-0000179200.tif',
                                        gcs_path + 'mc' + mc + '_0000179200-0000268800.tif',
                                        gcs_path + 'mc' + mc + '_0000268800-0000000000.tif',
                                        gcs_path + 'mc' + mc + '_0000268800-0000089600.tif',
                                        gcs_path + 'mc' + mc + '_0000268800-0000179200.tif',
                                        gcs_path + 'mc' + mc + '_0000268800-0000268800.tif',
                                      ])));

  // Make a collection from the list of images
  var collection = ee.ImageCollection(uris.map(ee.Image.loadGeoTIFF));
  
  // Make single image from collection
  var mc_img = collection.mosaic().rename(band_name);
  
  // Cast data type
  mc_img = ee.Image(ee.Algorithms.If(ee.String(response_type).equals('binary'),
                                     mc_img.round().int8(),
                                     mc_img.round().uint16()));
  
  // // Export
  // Export.image.toAsset({
  //   image: mc_img,
  //   description: 'model_' + response_type + '_' + year + '_' + ds_type + '_' + version + '_' + mc,
  //   assetId: ic_path + mc,
  //   region: ee.Geometry.Polygon([-180, 88, 0, 88, 180, 88, 180, 45, 0, 45, -180, 45], null, false), // Specify as rectangle to avoid gaps in output
  //   scale: scale, 
  //   crs: crs, 
  //   maxPixels: 1e13
  // });
  
  // Return
  return mc_img;
  
});

// 2.1 ----- LOOP MC LIST TO READ IN IMAGES -----

mc_imgs = ee.ImageCollection(mc_imgs);

print(mc_imgs);
throw('stop');

// 2.2 ----- LOOP MC LIST TO READ IN IMAGES -----

// Need to compute using .reduce() so we can set a parallelScale that enables tasks that run out of memory with the default
var mc_median = mc_imgs.reduce(ee.Reducer.median(), 4);

// Cast data type
mc_median = ee.Image(ee.Algorithms.If(ee.String(response_type).equals('binary'),
                                      mc_median.round().int8(),
                                      mc_median.round().uint16()));
                                     
// ====================
// 3. EXPORT =========
// ====================

// Export.image.toAsset({
//   image: mc_median,
//   description: 'model_' + response_type + '_' + ds_type + '_' + version + '_mc',
//   assetId: 'projects/arctic-biomass-mapping/assets/modeled_' + response_type + '/model_' + response_type + '_' + ds_type + '_' + version + '_mc',
//   region: ee.Geometry.Polygon([-180, 88, 0, 88, 180, 88, 180, 45, 0, 45, -180, 45], null, false), // Specify as rectangle to avoid gaps in output
//   scale: scale, 
//   crs: crs, 
//   maxPixels: 1e13
// });
