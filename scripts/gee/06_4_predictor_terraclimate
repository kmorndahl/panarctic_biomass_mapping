/*

DESCRIPTION: Create climate predictors

AUTHOR: Kathleen Orndahl
DATE: 11-10-2024

NOTES:

TO-DO:

*/

// ===================
// 1. SET-UP =========
// ===================

// 1.0 ----- READ IN DATA -----

// Read in TerraClimate data
// https://developers.google.com/earth-engine/datasets/catalog/IDAHO_EPSCOR_TERRACLIMATE
var terra_climate = ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE");

// 1.1 ----- PARAMETERS -----

var ccdc_start_year = 1995;
var ccdc_end_year = 2022;

// Get projection information
var proj = terra_climate.first().projection().getInfo();
var crs = proj.wkt;
var transform = proj.transform;

// =====================
// 2. ANALYSIS =========
// =====================

// 2.0 ----- CALCULATE VARIABLES -----

// Get number of years
var climate_nyears = ee.Number(ccdc_end_year).subtract(ee.Number(ccdc_start_year)).add(1);

// Calculate average yearly temperature
var climate_tmean =  terra_climate.filter(ee.Filter.calendarRange(ccdc_start_year, ccdc_end_year, "year"))
                                  .map(function(i) {return i.expression("tmmean = (b('tmmx') + b('tmmn'))/2.0")
                                                            .divide(10)}); // Scale factor

// Calculate summer warmth index
var climate_swi = climate_tmean.map(function(i) {return i.multiply(i.gt(0))})
                               .reduce(ee.Reducer.sum()).divide(climate_nyears)
                               .rename('swi');

// Calculate minimum January temperature
var climate_tmin = terra_climate.filter(ee.Filter.calendarRange(1, 1, "month"))
                                .filter(ee.Filter.calendarRange(ccdc_start_year, ccdc_end_year, "year"))
                                .select('tmmn')
                                .reduce(ee.Reducer.mean())
                                .divide(10) // Scale factor
                                .rename('tmin');

// Calculate total annual precipitation
var climate_tapmm = terra_climate.filter(ee.Filter.calendarRange(ccdc_start_year, ccdc_end_year, "year"))
                                 .select('pr')
                                 .reduce(ee.Reducer.sum())
                                 .divide(climate_nyears)
                                 .rename('tapmm');

// Combine
var climate = climate_swi.addBands(climate_tmin)
                         .addBands(climate_tapmm);

// 2.1 ----- FILL NAs -----

var terraclimate = ee.Image("projects/arctic-biomass-mapping/assets/predictors/terraclimate");
var terraclimate_fill_gaps = terraclimate.focalMean({radius: terraclimate.projection().nominalScale().multiply(3).divide(2), kernelType: 'square', units: 'meters', iterations: 1}); // Fill some gaps to avoid NAs in cal/val data
terraclimate = terraclimate_fill_gaps.blend(terraclimate);
terraclimate = terraclimate.regexpRename('^', 'climate_4km_');

// ===================
// 3. EXPORT =========
// ===================

Export.image.toAsset({
  image: terraclimate,
  description: 'terraclimate_filled',
  assetId: 'projects/arctic-biomass-mapping/assets/predictors/terraclimate_filled',
  region: ee.Geometry.Polygon([-180, 88, 0, 88, 180, 88, 180, 45, 0, 45, -180, 45], null, false), // Specify as rectangle to avoid gaps in output
  crs: crs,
  crsTransform: transform,
  maxPixels: 1e12
});